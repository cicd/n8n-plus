# Naam van de workflow
name: Build and Push Custom n8n Image

on:
  # Trigger de workflow elke dag om 03:00 UTC
  schedule:
    - cron: '0 3 * * *'
  # Maakt het ook mogelijk om de workflow handmatig te starten vanuit de GitHub UI
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Nodig om naar GitHub Container Registry te pushen

    steps:
      # Stap 1: Code uitchecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # Stap 2: Inloggen bij de container registry
      # We gebruiken hier GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Stap 3: Haal de meest recente versie-informatie op van de n8n-image
      - name: Get latest n8n image digest
        id: get_digest
        run: |
          # We halen de 'digest' op, een unieke ID voor de image-versie.
          # Dit is betrouwbaarder dan alleen de 'latest' tag.
          DIGEST=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" "https://registry-1.docker.io/v2/n8nio/n8n/manifests/latest" | jq -r '.config.digest')
          echo "Latest n8n digest is $DIGEST"
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      # Stap 4: Metadata voor de Docker-image voorbereiden
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          # We taggen de image met de unieke digest van de n8n-versie
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.get_digest.outputs.digest }}

      # Stap 5: Bouw de image en push deze naar de registry
      # De build wordt automatisch overgeslagen als een image met dezelfde tag al bestaat.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Gebruik de cache van de registry om builds te versnellen
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:latest,mode=max